dnl Process this file with autoreconf to produce a configure script.
AC_INIT([gstat],[2.5.3],[mailto:geostatitics@52north.org (subscription required)],[],[http://www.gstat.org/])
AC_CONFIG_SRCDIR(src/gstat.c)
AC_PREREQ([2.69])
AC_CONFIG_HEADERS(src/config.h:src/config.hin)
AC_CONFIG_FILES([makefile
                 meschach/makefile
                 src/makefile])
version=${PACKAGE_VERSION}
AC_SUBST(version)
target=`uname -m`
AC_SUBST(target)

dnl cache_file=/dev/null

define([AC_CACHE_LOAD], )
define([AC_CACHE_SAVE], )
define([AC_CACHE_VAL], [
$2
])

dnl Determine if using gdal config
GDAL_CONFIG="gdal-config"
AC_ARG_WITH([gdal-config],
	AC_HELP_STRING([--with-gdal-config=GDAL_CONFIG],
		[the location of gdal-config]
  ),
	[gdal_config=$withval]
)
if test [ -n "$gdal_config" ]; then
  AC_SUBST([GDAL_CONFIG],["${gdal_config}"])
fi
echo "gdal-config: ${GDAL_CONFIG}"
if test `${GDAL_CONFIG} --version`; then
  CPPFLAGS="$CPPFLAGS `${GDAL_CONFIG} --cflags`"
  LIBS="$LIBS `${GDAL_CONFIG} --libs`"
	AC_DEFINE([HAVE_LIBGDAL],[1],[Define if you have the gdal library (-lgdal)])
fi

DEBUG_FLAG="-g -O2"
rm -f ./libgstat.*

dnl Checks for programs.
AC_PROG_CC
AC_PROG_RANLIB
AC_PROG_INSTALL
# AC_ISC_POSIX
# AC_AIX

AC_HEADER_STDC
AC_C_PROTOTYPES
AC_C_CONST
dnl this shell variable is set to no if above failed to set
dnl compiler to ansi mode (see aclocal.m4)
if test "$am_cv_prog_cc_stdc" != no; then
  AC_DEFINE([ANSI_C],[1],[compiler to ansi mode (see aclocal.m4)])
fi
dnl AC_MSDOS

if test xx"$LEXYACC" != xx; then
  rm -f ./src/lex.c ./src/parse.c ./src/parse.h
fi

AC_PROG_LEX
AC_PROG_YACC

dnl Checks for header files.
AC_CHECK_HEADERS(stat.h unistd.h getopt.h)

dnl Checks for typedefs, structures, and compiler characteristics.
# no checks

# check for <sys/time.h>, for gettimeofday function
AC_HEADER_TIME

dnl Checks for library functions:
AC_FUNC_MEMCMP
AC_FUNC_VPRINTF
AC_CHECK_FUNCS(strstr strtod strtol popen drand48 gettimeofday snprintf vsnprintf getopt_long)

dnl Add getopt.o to LIBOBJS if getopt is not found in a default lib:
AC_REPLACE_FUNCS(getopt)

dnl Checks for compiler characteristics (not suitable when cross compiling)
AC_C_BIGENDIAN
# AC_ARG_WITH(readline,
# [  --with-readline         use gnu readline for command line editing], 
# AC_DEFINE(HAVE_LIBREADLINE))

# exclude curses-related parts?
AC_ARG_WITH(curses,
  [  --without-curses        exclude user interface anyway (default: detect)],
  if test "$with_curses" = yes; then
    AC_CHECK_LIB(ncurses, main,
      AC_DEFINE([HAVE_LIBNCURSES],[1],[Define if you have the ncurses library (-lncurses)])
      LIBS="$LIBS -lncurses"
      INCLUDES="$INCLUDES -I/usr/include/ncurses", 
      AC_CHECK_LIB(curses, main,
        AC_DEFINE([HAVE_LIBCURSES],[1],[Define if you have the curses library (-lcurses)])
        LIBS="$LIBS -lcurses"
      )
    )
  fi,
  AC_CHECK_LIB(ncurses, main,
    AC_DEFINE([HAVE_LIBNCURSES],[1],[Define if you have the ncurses library (-lncurses)])
    LIBS="$LIBS -lncurses"
    INCLUDES="-I/usr/include/ncurses", 
    AC_CHECK_LIB(curses, main,
      AC_DEFINE([HAVE_LIBCURSES],[1],[Define if you have the curses library (-lcurses)])
      LIBS="$LIBS -lcurses"
    )
  )
)

dnl Define if you have the gd library (-lgd)
AC_ARG_WITH(gd,
  [  --with-gd               include gd png library],
  if test "$with_gd" = yes; then
    AC_DEFINE([HAVE_LIBGD],[1],[Define if you have the gd library (-lgd)])
dnl    AC_CHECK_FUNCS(gdImagePng) -- don't check, but let's trust that it's there:
    AC_DEFINE([HAVE_GDIMAGEPNG],[1],[... with PNG support...])
    LIBS="$LIBS -lgd -lpng -lz"
  else
    if test "$with_gd" != no; then
      echo "using libgd path: $with_gd"
      AC_DEFINE([HAVE_LIBGD],[1],[Define if you have the gd library (-lgd)])
      AC_DEFINE([HAVE_GDIMAGEGIF],[1],[...or with GIF support])
      INCLUDES="$INCLUDES -I$with_gd" 
      LIBS="$LIBS -L$with_gd -lgd -lpng -lz"
    fi
  fi,
  AC_CHECK_LIB(gd, gdImagePng,
    AC_CHECK_LIB(png, main,
      AC_CHECK_LIB(z, main,
        AC_DEFINE([HAVE_LIBGD],[1],[Define if you have the gd library (-lgd)])
        AC_DEFINE([HAVE_GDIMAGEPNG],[1],[... with PNG support...])
        LIBS="$LIBS -lgd -lpng -lz"
      )
    ),
    AC_CHECK_LIB(gd, gdImageGif,
      AC_DEFINE([HAVE_LIBGD],[1],[Define if you have the gd library (-lgd)])
      AC_DEFINE([HAVE_GDIMAGEGIF],[1],[...or with GIF support])
      LIBS="$LIBS -lgd"
    )
  )
)

dnl Compile with libraries from external database
AC_ARG_WITH(extdbase,
  [  --with-extdbase         include ext-dbase headers],
  if test "$with_extdbase" = yes; then
    AC_DEFINE([HAVE_EXT_DBASE],[1],[Define if you want to link/include extdbase extension])
    LIBS="$LIBS -lpqdbase -lstdc++"
  fi,
)

dnl Compile with libnetcdf
AC_ARG_WITH(netcdf,
  [  --with-netcdf           include netcdf library],
  if test "$with_netcdf" = yes; then
    AC_DEFINE([HAVE_LIBNETCDF],[1],[Define if you have the netcdf library (-lnetcdf) for GMT map support])
    LIBS="$LIBS -lnetcdf"
  fi,
  AC_CHECK_LIB(netcdf, main)
)

dnl Manually include libgdal
AC_ARG_WITH(gdal,
  [  --with-gdal             include gdal library],
  if test "$with_gdal" = yes; then
    AC_DEFINE([HAVE_LIBGDAL],[1],[Define if you have the gdal library (-lgdal)])
    LIBS="$LIBS -lgdal"
  fi,
  AC_CHECK_LIB(gdal, GDALAllRegister)
)

dnl debug flags
AC_ARG_WITH(debug,
  [  --with-debug            use debug option (-g) ],
  DEBUG_FLAG="-g -Wall"
)
AC_SUBST(INCLUDES)
AC_SUBST(DEBUG_FLAG)

dnl compile libgstat objects
AC_ARG_WITH(libgstat,[  --with-libgstat         compile to libgstat.a ],
  AC_DEFINE([LIBGSTAT],[1],[define if target is libgstat.a])
  CPPFLAGS="$CPPFLAGS -fPIC" dnl compile as a shared library this is gcc only will need to be adjusted
)

# Link meschach library? Default: yes.
AC_ARG_WITH(meschach,
  [  --with-meschach         use local meschach lib (default: include)],
  if test "$with_meschach" = yes; then
    LIB_MESCHACH="lib/libmeschach.a"
  else
    LIB_MESCHACH=""
  fi,
  dnl Detect:
  AC_CHECK_LIB(meschach, QRfactor, 
    LIB_MESCHACH=""
    INCLUDES="$INCLUDES -I/usr/include/meschach",
    LIB_MESCHACH="lib/libmeschach.a"
  ) 
)
AC_SUBST(LIB_MESCHACH)

dnl Check for inclusion of sparse matrix routines:
dnl default to not included
MESCHACH_TARGET="basic"
WITH_SPARSE_OPT=""
AC_ARG_WITH(sparse,
  [  --with-sparse           include sparse matrix routines],
  AC_DEFINE([HAVE_SPARSE],[1],[include sparse matrix routines in meschach])
  WITH_SPARSE_OPT="--with-sparse"
  MESCHACH_TARGET="with-sparse"
)
AC_SUBST(WITH_SPARSE_OPT)
AC_SUBST(MESCHACH_TARGET)

# Link csf library? Default: detect.
AC_ARG_WITH(csf,
  [  --with-csf              link to csf library (default: detect)],
  if test "$with_csf" != no; then
    if test -d $with_csf ; then
      INCLUDES="$INCLUDES -I$with_csf/include" 
      LIBS="$LIBS -L $with_csf/lib -lcsf"
    else
      INCLUDES="$INCLUDES -I$/usr/local/include" 
      LIBS="$LIBS -L $/usr/local/lib -lcsf"
    fi
    AC_DEFINE([HAVE_LIBCSF],[1],[for the PCRASTER cross system format (csf) library (-lcsf)])
  fi,
  AC_CHECK_LIB(csf, MgetVersion,
    AC_DEFINE([HAVE_LIBCSF],[1],[for the PCRASTER cross system format (csf) library (-lcsf)])
    LIBS="$LIBS -lcsf"
  )
)

dnl Compile with libgis libraries
AC_ARG_WITH(grass6,
  [  --with-grass6=path       define path to grass (look up GISBASE) ],
  if test -d $with_grass6 ; then
    AC_DEFINE([HAVE_LIBGIS],[1],[define if GRASS' libgis.a is present])
    LDFLAGS="$LDFLAGS -L$with_grass6/lib"
    INCLUDES="$INCLUDES -I$with_grass6/include" 
    GISLIB="-lgrass_gis -lgrass_datetime -lgrass_sites -lgrass_dbmiclient -lgrass_dbmibase -lgrass_vect -lgrass_dig2 -lgrass_dgl -lgrass_rtree -lgrass_linkm"
    LIBS="$LIBS $GISLIB -lz"
  fi,
)

AC_ARG_WITH(grass,
  [  --with-grass            link to grass library  
    --with-grass=path       define path to grass (look up GISBASE) ],
  if test "$with_grass" = yes; then
    AC_DEFINE([HAVE_LIBGIS],[1],[define if GRASS' libgis.a is present])
    LIBS="$LIBS -L/usr/local/grass5/lib"
    INCLUDES="$INCLUDES -I/usr/local/grass5/include" 
    AC_CHECK_LIB(grass_gis, G_gisinit, GISLIB="-lgrass_gis -lgrass_datetime",
      AC_CHECK_LIB(gis, G_gisinit, GISLIB="-lgis -ldatetime")
    )
    LIBS="$LIBS $GISLIB -lz"
  else
    if test -d $with_grass ; then
      AC_DEFINE([HAVE_LIBGIS],[1],[define if GRASS' libgis.a is present])
      LIBS="$LIBS -L $with_grass/lib"
      INCLUDES="$INCLUDES -I$with_grass/include" 
      AC_CHECK_LIB(grass_gis, G_gisinit, GISLIB="-lgrass_gis -lgrass_datetime -lgrass_sites",
      AC_CHECK_LIB(gis, G_gisinit, GISLIB="-lgis -ldatetime"))
      LIBS="$LIBS $GISLIB -lz"
    fi
  fi,
)

dnl Compile with libgsl
AC_ARG_WITH(gsl,     [  --with-gsl              include gnu scientific library (gsl)
  --with-gsl=PATH         define path to gsl library subdirs (e.g., /usr/local)],
if test "$with_gsl" = yes; then
 AC_DEFINE([HAVE_LIBGSL],[1],[Define if you have the GNU scientific library (-lgsl)])
 LIBS="$LIBS -lgsl -lgslcblas"
else
 if test -d $with_gsl ; then
  AC_DEFINE([HAVE_LIBGSL],[1],[Define if you have the GNU scientific library (-lgsl)])
  LIBS="$LIBS -L $with_gsl -lgsl -lgslcblas"
 fi
fi,
 AC_CHECK_LIB(gsl, main,
  AC_DEFINE([HAVE_LIBGSL],[1],[Define if you have the GNU scientific library (-lgsl)])
  LIBS="$LIBS -lgsl -lgslcblas"
 )
)

dnl Add math library:
LIBS="$LIBS -lm"
# dnl Replace `main' with a function in -lreadline: (doesn't link with ncurses)
# AC_CHECK_LIB(readline, main)

# process target files, apart from the config.h files:
AC_OUTPUT
